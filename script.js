document.addEventListener('DOMContentLoaded', function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const audio = document.getElementById('audioPlayer');
    const playPauseBtn = document.getElementById('playPauseBtn');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const volumeSlider = document.getElementById('volumeSlider');
    const trackSelect = document.getElementById('trackSelect');
    const currentTrack = document.getElementById('currentTrack');
    const currentArtist = document.getElementById('currentArtist');
    const progressBar = document.getElementById('progressBar');
    const progress = document.getElementById('progress');
    const currentTime = document.getElementById('currentTime');
    const duration = document.getElementById('duration');
    const visualizer = document.getElementById('visualizer');
    const albumArt = document.getElementById('albumArt');
    const albumImage = document.getElementById('albumImage');
    const particles = document.getElementById('particles');
    const leftGlow = document.getElementById('leftGlow');
    const rightGlow = document.getElementById('rightGlow');

    // –ú–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤
    const tracks = [
        { 
            name: 'Tangled Up', 
            artist: 'Caro Emerald',
            path: 'assets/Caro Emerald, Tangled Up (Lokee Remix).mp3',
            colors: {
                primary: '#1a1a2e',
                secondary: '#16213e',
                accent: '#ff9a00'
            },
            cover: 'https://i.scdn.co/image/ab67616d0000b273cd30153be1ecdfea9b4abf52',
            visualizer: ['#ff9a00', '#ff2e63'],
            neonColor: '#ff9a00'
        },
        { 
            name: 'Valhalla Calling', 
            artist: 'Miracle Of Sound',
            path: 'assets/VALHALLA_CALLING_by_Miracle_Of_Sound_ft_Peyton_Parrish_DUET_VERSION.mp3',
            colors: {
                primary: '#0f1b2e',
                secondary: '#1d2b64',
                accent: '#4a90e2'
            },
            cover: 'https://i.ytimg.com/vi/7Pf6jY9t_1I/maxresdefault.jpg',
            visualizer: ['#1d2b64', '#4a90e2'],
            neonColor: '#4a90e2'
        },
        { 
            name: 'Lust', 
            artist: 'Marino ft. Alexandria',
            path: 'assets/Marino - Lust (feat. Alexandria).m4a',
            colors: {
                primary: '#1a0a0a',
                secondary: '#330000',
                accent: '#ff0000'
            },
            cover: 'https://i.scdn.co/image/ab67616d0000b273c10ff9923331db1916236dba',
            visualizer: ['#870000', '#ff0000'],
            neonColor: '#ff0000'
        },
        { 
            name: 'Puttin\' On The Ritz', 
            artist: 'Taco',
            path: 'assets/Taco - Puttin\' On The Ritz.m4a',
            colors: {
                primary: '#0a0a14',
                secondary: '#1a1a2e',
                accent: '#ffd700'
            },
            cover: 'https://is1-ssl.mzstatic.com/image/thumb/Music124/v4/dc/d5/1d/dcd51dee-de60-400c-f97a-6d3cb5c92b60/cover.jpg/600x600bf-60.jpg',
            visualizer: ['#141e30', '#ffd700'],
            neonColor: '#ffd700'
        },
        { 
            name: 'The Cigarette Duet', 
            artist: 'Princess Chelsea',
            path: 'assets/The Cigarette Duet  –î—É—ç—Ç —Å–∏–≥–∞—Ä–µ—Ç [Princess Chelsea] (Russian cover with ‚Ä™IgorCoolikov‚Ä¨).m4a',
            colors: {
                primary: '#2d1b2e',
                secondary: '#4a2c4d',
                accent: '#e84178'
            },
            cover: 'https://i.discogs.com/nKwEjkfokl7jQ0lAVt0lS4nYL5-VIS9FCWXO7qrQXXA/rs:fit/g:sm/q:90/h:600/w:585/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlSy9SLTY5MzEw/NjYtMTQ4OTY3NDIx/MS04MDU5LmpwZWc.jpeg',
            visualizer: ['#6d214f', '#e84178'],
            neonColor: '#e84178'
        },
        { 
            name: 'A Man Without Love', 
            artist: 'Engelbert Humperdinck',
            path: 'assets/A Man Without Love LYRICS Video Engelbert Humperdinck 1968 üåô Moon Knight Episode 1.m4a',
            colors: {
                primary: '#0f1c2e',
                secondary: '#1f3a5c',
                accent: '#4ca1af'
            },
            cover: 'https://is1-ssl.mzstatic.com/image/thumb/Music118/v4/15/8d/e3/158de33b-a496-56f7-c302-002978906503/00602557548259.rgb.jpg/600x600bf-60.jpg',
            visualizer: ['#2c3e50', '#4ca1af'],
            neonColor: '#4ca1af'
        }
    ];

    let currentTrackIndex = 0;
    let isPlaying = false;
    let audioContext, analyser, dataArray, bufferLength;
    let visualizerBars = [];
    let animationId = null;
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∏—Ç–º–∏—á–Ω–æ–≥–æ —Å–≤–µ—á–µ–Ω–∏—è
    let beatDetected = false;
    let lastBeatTime = 0;
    let beatThreshold = 0.7;
    let currentPulseIntensity = 0;

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü
    let particlesData = [];
    let isParticlesTransitioning = false;
    let particleTransitionProgress = 0;
    let currentMusicIntensity = 0;

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    function createVisualizer() {
        visualizer.innerHTML = '';
        visualizerBars = [];
        
        for (let i = 0; i < 30; i++) {
            const bar = document.createElement('div');
            bar.className = 'visualizer-bar';
            bar.style.height = '3px'; // –ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è
            bar.style.alignSelf = 'flex-end'; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∏–∂–∞—Ç–∏–µ –∫ –Ω–∏–∑—É
            bar.style.marginTop = 'auto'; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–∂–∞—Ç–∏–µ –∫ –Ω–∏–∑—É
            visualizer.appendChild(bar);
            visualizerBars.push(bar);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    function initAudioAnalyzer() {
        try {
            if (audioContext) return;
            
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
            analyser = audioContext.createAnalyser();
            const source = audioContext.createMediaElementSource(audio);
            source.connect(analyser);
            analyser.connect(audioContext.destination);
            
            analyser.fftSize = 256;
            bufferLength = analyser.frequencyBinCount;
            dataArray = new Uint8Array(bufferLength);
        } catch (error) {
            console.error('Audio analyzer initialization failed:', error);
        }
    }

    // –î–µ—Ç–µ–∫—Ç–æ—Ä –±–∏—Ç–æ–≤ (—Ä–∏—Ç–º–∞)
    function detectBeat(bassIntensity, currentTime) {
        // –ï—Å–ª–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –±–∞—Å–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ –∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∏—Ç–∞
        if (bassIntensity > beatThreshold && (currentTime - lastBeatTime) > 200) {
            beatDetected = true;
            lastBeatTime = currentTime;
            currentPulseIntensity = 1.0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—É–ª—å—Å–∞—Ü–∏–∏
            return true;
        }
        return false;
    }

    // –ü–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –ø—É–ª—å—Å–∞—Ü–∏–∏
    function updatePulseIntensity() {
        if (currentPulseIntensity > 0) {
            currentPulseIntensity -= 0.08; // –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è
            if (currentPulseIntensity < 0) currentPulseIntensity = 0;
        }
        beatDetected = false;
    }

    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞ —Å —Ä–∏—Ç–º–∏—á–Ω—ã–º —Å–≤–µ—á–µ–Ω–∏–µ–º
    function visualize() {
        if (!analyser || !isPlaying) return;
        
        try {
            analyser.getByteFrequencyData(dataArray);
            const currentTime = Date.now();
            
            // –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¢–û–†–ê - —Å—Ç–æ–ª–±—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –°–ê–ú–û–ì–û –ù–ò–ó–ê
            for (let i = 0; i < visualizerBars.length; i++) {
                const barIndex = Math.floor((i / visualizerBars.length) * bufferLength);
                const value = dataArray[barIndex] / 255;
                
                // –í—ã—Å–æ—Ç–∞ –æ—Ç 3px (–º–∏–Ω–∏–º—É–º) –¥–æ 60px (–º–∞–∫—Å–∏–º—É–º)
                const minHeight = 3;
                const maxHeight = 60;
                const height = minHeight + (value * (maxHeight - minHeight));
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã—Å–æ—Ç—É - —Å—Ç–æ–ª–±–µ—Ü —Ä–∞—Å—Ç–µ—Ç —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
                visualizerBars[i].style.height = `${height}px`;
                
                // –ì—Ä–∞–¥–∏–µ–Ω—Ç —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
                const currentColors = tracks[currentTrackIndex].visualizer;
                visualizerBars[i].style.background = `linear-gradient(to top, ${currentColors[0]}, ${currentColors[1]})`;
                
                // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü –ø—Ä–∏–∂–∞—Ç –∫ —Å–∞–º–æ–º—É –Ω–∏–∑—É
                visualizerBars[i].style.alignSelf = 'flex-end';
                visualizerBars[i].style.marginTop = 'auto';
            }
            
            // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –º—É–∑—ã–∫–∏
            const overallIntensity = dataArray.reduce((a, b) => a + b) / (bufferLength * 255);
            currentMusicIntensity = overallIntensity;
            
            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ–æ–Ω–æ–≤—ã—Ö –ª–∏–Ω–∏–π —Å —Ä–∏—Ç–º–∏—á–Ω—ã–º —Å–≤–µ—á–µ–Ω–∏–µ–º
            if (leftGlow && rightGlow) {
                // –ê–Ω–∞–ª–∏–∑ –Ω–∏–∑–∫–∏—Ö —á–∞—Å—Ç–æ—Ç –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–∏—Ç–æ–≤
                const bassFrequencies = dataArray.slice(0, 10);
                const bass = bassFrequencies.reduce((a, b) => a + b) / bassFrequencies.length / 255;
                
                // –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–∏—Ö —á–∞—Å—Ç–æ—Ç –¥–ª—è –≤—ã—Å–æ—Ç—ã –ª–∏–Ω–∏–π
                const midFrequencies = dataArray.slice(10, 30);
                const mid = midFrequencies.reduce((a, b) => a + b) / midFrequencies.length / 255;
                
                // –î–µ—Ç–µ–∫—Ü–∏—è –±–∏—Ç–æ–≤
                detectBeat(bass, currentTime);
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª—å—Å–∞—Ü–∏–∏
                updatePulseIntensity();
                
                // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É –ª–∏–Ω–∏–π
                const minHeight = 15;
                const maxHeight = 80;
                const lineHeight = minHeight + (mid * (maxHeight - minHeight));
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–æ–Ω–æ–≤—ã–µ –ª–∏–Ω–∏–∏
                leftGlow.style.height = `${lineHeight}%`;
                rightGlow.style.height = `${lineHeight}%`;
                
                // –†–ò–¢–ú–ò–ß–ù–û–ï –°–í–ï–ß–ï–ù–ò–ï - –±–µ–∑ –º–µ—Ä—Ü–∞–Ω–∏—è, —Ç–æ–ª—å–∫–æ –ø—É–ª—å—Å–∞—Ü–∏—è –Ω–∞ –±–∏—Ç–∞—Ö
                const baseOpacity = 0.8; // –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                const pulseOpacity = currentPulseIntensity * 0.2; // –õ–µ–≥–∫–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è –Ω–∞ –±–∏—Ç–∞—Ö
                const totalOpacity = baseOpacity + pulseOpacity;
                
                leftGlow.style.opacity = Math.min(1, totalOpacity);
                rightGlow.style.opacity = Math.min(1, totalOpacity);
                
                // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–Ω–∏—è –≤ —Ç–∞–∫—Ç (–±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ—Ä—Ü–∞–Ω–∏—è)
                const baseBlur = 10;
                const pulseBlur = currentPulseIntensity * 25; // –£—Å–∏–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –±–∏—Ç–∞—Ö
                const totalBlur = baseBlur + pulseBlur;
                
                const baseSpread = 3;
                const pulseSpread = currentPulseIntensity * 10;
                const totalSpread = baseSpread + pulseSpread;
                
                // –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –Ω–µ–æ–Ω–æ–≤–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π –Ω–∞ –±–∏—Ç–∞—Ö
                leftGlow.style.boxShadow = 
                    `0 0 ${totalBlur}px var(--neon-color),
                     0 0 ${totalBlur * 1.5}px var(--neon-color),
                     0 0 ${totalBlur * 2}px var(--neon-color),
                     0 0 ${totalSpread}px var(--neon-color),
                     inset 0 0 8px rgba(255, 255, 255, 0.2)`;
                
                rightGlow.style.boxShadow = 
                    `0 0 ${totalBlur}px var(--neon-color),
                     0 0 ${totalBlur * 1.5}px var(--neon-color),
                     0 0 ${totalBlur * 2}px var(--neon-color),
                     0 0 ${totalSpread}px var(--neon-color),
                     inset 0 0 8px rgba(255, 255, 255, 0.2)`;
                
                // –õ–µ–≥–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏ —Å–∏–ª—å–Ω—ã—Ö –±–∏—Ç–∞—Ö (–±–µ–∑ —Ä–µ–∑–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤)
                if (currentPulseIntensity > 0.6) {
                    const pulseColor = `rgba(255, 255, 255, ${currentPulseIntensity * 0.2})`;
                    leftGlow.style.background = `linear-gradient(to top, var(--neon-color) 70%, ${pulseColor})`;
                    rightGlow.style.background = `linear-gradient(to top, var(--neon-color) 70%, ${pulseColor})`;
                } else {
                    // –ü–ª–∞–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–≤–µ—Ç—É
                    leftGlow.style.background = 'var(--neon-color)';
                    rightGlow.style.background = 'var(--neon-color)';
                }
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —á–∞—Å—Ç–∏—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –º—É–∑—ã–∫–∏
            updateParticlesMovement();
            
            animationId = requestAnimationFrame(visualize);
        } catch (error) {
            console.error('Visualization error:', error);
            if (animationId) {
                cancelAnimationFrame(animationId);
            }
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ—Ö–æ–¥–∞
    function createParticles() {
        particles.innerHTML = '';
        particlesData = [];
        
        const particleCount = 15;
        const currentColors = tracks[currentTrackIndex].colors;
        
        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            
            // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (—Å–ª—É—á–∞–π–Ω–∞—è)
            const startLeft = Math.random() * 100;
            const startTop = Math.random() * 100;
            const startSize = Math.random() * 15 + 5;
            const startOpacity = Math.random() * 0.3 + 0.1;
            
            // –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–ª—è —Ç—Ä–µ–∫–∞)
            const endLeft = (Math.random() * 80 + 10) + (i % 3 - 1) * 20;
            const endTop = (Math.random() * 80 + 10) + (i % 2 - 0.5) * 30;
            const endSize = Math.random() * 15 + 5;
            const endOpacity = Math.random() * 0.3 + 0.1;
            
            particle.style.left = `${startLeft}vw`;
            particle.style.top = `${startTop}vh`;
            particle.style.width = `${startSize}px`;
            particle.style.height = `${startSize}px`;
            particle.style.opacity = startOpacity;
            particle.style.background = currentColors.accent;
            particle.style.transition = 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
            particle.style.position = 'absolute';
            particle.style.borderRadius = '50%';
            particle.style.pointerEvents = 'none';
            
            particles.appendChild(particle);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            particlesData.push({
                element: particle,
                startLeft: startLeft,
                startTop: startTop,
                startSize: startSize,
                startOpacity: startOpacity,
                endLeft: endLeft,
                endTop: endTop,
                endSize: endSize,
                endOpacity: endOpacity,
                baseLeft: endLeft,
                baseTop: endTop,
                baseSize: endSize,
                baseOpacity: endOpacity,
                velocityX: 0,
                velocityY: 0,
                movementIntensity: Math.random() * 0.5 + 0.5
            });
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∞
        startParticleTransition();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —á–∞—Å—Ç–∏—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –º—É–∑—ã–∫–∏
    function updateParticlesMovement() {
        if (isParticlesTransitioning || particlesData.length === 0) return;
        
        const intensity = currentMusicIntensity;
        const beatBoost = currentPulseIntensity;
        
        // –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
        const movementStrength = 0.2 + intensity * 0.8 + beatBoost * 1.2;
        
        particlesData.forEach((particleData, index) => {
            const particle = particleData.element;
            
            // –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –≤–æ–∫—Ä—É–≥ –±–∞–∑–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            const time = Date.now() * 0.001;
            const individualOffset = index * 0.1;
            
            // –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –∞–º–ø–ª–∏—Ç—É–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è
            const moveX = Math.sin(time * (0.3 + particleData.movementIntensity * 0.3) + individualOffset) * movementStrength * 0.8;
            const moveY = Math.cos(time * (0.2 + particleData.movementIntensity * 0.4) + individualOffset) * movementStrength * 0.6;
            
            // –£–ú–ï–ù–¨–®–ï–ù–ù–´–ô —ç—Ñ—Ñ–µ–∫—Ç "—Ç–æ–ª—á–∫–∞" –Ω–∞ –±–∏—Ç–∞—Ö
            const beatPushX = beatBoost * (Math.random() - 0.5) * 3;
            const beatPushY = beatBoost * (Math.random() - 0.5) * 3;
            
            // –£–ú–ï–ù–¨–®–ï–ù–ù–û–ï –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
            const sizeVariation = intensity * 2 + beatBoost * 3;
            const newSize = particleData.baseSize + sizeVariation;
            
            // –£–ú–ï–ù–¨–®–ï–ù–ù–û–ï –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            const opacityVariation = intensity * 0.1 + beatBoost * 0.15;
            const newOpacity = Math.min(1, particleData.baseOpacity + opacityVariation);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            const newLeft = particleData.baseLeft + moveX + beatPushX;
            const newTop = particleData.baseTop + moveY + beatPushY;
            
            particle.style.left = `${newLeft}vw`;
            particle.style.top = `${newTop}vh`;
            particle.style.width = `${newSize}px`;
            particle.style.height = `${newSize}px`;
            particle.style.opacity = newOpacity;
            
            // –ë–û–õ–ï–ï –ü–õ–ê–í–ù–´–ï –ø–µ—Ä–µ—Ö–æ–¥—ã
            const transitionTime = Math.max(0.1, 0.3 - intensity * 0.2);
            particle.style.transition = `all ${transitionTime}s ease-out`;
        });
    }

    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–∞—Å—Ç–∏—Ü
    function startParticleTransition() {
        isParticlesTransitioning = true;
        particleTransitionProgress = 0;
        
        const transitionDuration = 800; // 0.8 —Å–µ–∫—É–Ω–¥—ã
        
        particlesData.forEach(particleData => {
            const particle = particleData.element;
            
            // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            setTimeout(() => {
                particle.style.left = `${particleData.endLeft}vw`;
                particle.style.top = `${particleData.endTop}vh`;
                particle.style.width = `${particleData.endSize}px`;
                particle.style.height = `${particleData.endSize}px`;
                particle.style.opacity = particleData.endOpacity;
                particle.style.transition = 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                particleData.baseLeft = particleData.endLeft;
                particleData.baseTop = particleData.endTop;
                particleData.baseSize = particleData.endSize;
                particleData.baseOpacity = particleData.endOpacity;
            }, 50); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        });
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥
        setTimeout(() => {
            isParticlesTransitioning = false;
        }, transitionDuration);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–∫–∞
    function updateParticles() {
        const currentColors = tracks[currentTrackIndex].colors;
        
        particlesData.forEach(particleData => {
            const particle = particleData.element;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω—É—é
            particleData.startLeft = parseFloat(particle.style.left);
            particleData.startTop = parseFloat(particle.style.top);
            particleData.startSize = parseFloat(particle.style.width);
            particleData.startOpacity = parseFloat(particle.style.opacity);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            particleData.endLeft = (Math.random() * 80 + 10) + (Math.random() * 40 - 20);
            particleData.endTop = (Math.random() * 80 + 10) + (Math.random() * 40 - 20);
            particleData.endSize = Math.random() * 15 + 5;
            particleData.endOpacity = Math.random() * 0.3 + 0.1;
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç
            particle.style.background = currentColors.accent;
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∞
        startParticleTransition();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã
    function updateTheme() {
        const currentColors = tracks[currentTrackIndex].colors;
        const neonColor = tracks[currentTrackIndex].neonColor;
        
        // –§–æ–Ω
        document.body.style.background = `linear-gradient(135deg, ${currentColors.primary} 0%, ${currentColors.secondary} 100%)`;
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress.style.background = `linear-gradient(90deg, ${currentColors.accent}, ${currentColors.primary})`;
        
        // –ö–Ω–æ–ø–∫–∞ play/pause
        playPauseBtn.style.background = `linear-gradient(135deg, ${currentColors.accent}, ${currentColors.primary})`;
        
        // –ù–µ–æ–Ω–æ–≤—ã–µ –ª–∏–Ω–∏–∏
        document.documentElement.style.setProperty('--neon-color', neonColor);
        document.documentElement.style.setProperty('--accent-color', currentColors.accent);
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        const style = document.createElement('style');
        style.textContent = `
            .volume-slider::-webkit-slider-thumb {
                background: ${currentColors.accent};
            }
        `;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        const oldStyle = document.getElementById('dynamic-neon-styles');
        if (oldStyle) oldStyle.remove();
        
        style.id = 'dynamic-neon-styles';
        document.head.appendChild(style);
        
        // –û–±–ª–æ–∂–∫–∞
        albumImage.style.backgroundImage = `url('${tracks[currentTrackIndex].cover}')`;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü —Å –Ω–æ–≤—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        if (particlesData.length === 0) {
            createParticles();
        } else {
            updateParticles();
        }
        
        // –°–±—Ä–æ—Å –Ω–µ–æ–Ω–æ–≤—ã—Ö –ª–∏–Ω–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–∫–∞
        if (leftGlow && rightGlow) {
            leftGlow.style.height = '15%';
            rightGlow.style.height = '15%';
            leftGlow.style.opacity = '0.8';
            rightGlow.style.opacity = '0.8';
            leftGlow.style.background = 'var(--neon-color)';
            rightGlow.style.background = 'var(--neon-color)';
            
            // –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –º–µ—Ä—Ü–∞–Ω–∏—è
            leftGlow.style.boxShadow = 
                `0 0 10px var(--neon-color),
                 0 0 20px var(--neon-color),
                 0 0 30px var(--neon-color),
                 inset 0 0 8px rgba(255, 255, 255, 0.2)`;
            
            rightGlow.style.boxShadow = 
                `0 0 10px var(--neon-color),
                 0 0 20px var(--neon-color),
                 0 0 30px var(--neon-color),
                 inset 0 0 8px rgba(255, 255, 255, 0.2)`;
        }
        
        // –°–±—Ä–æ—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –±–∏—Ç–æ–≤
        beatDetected = false;
        currentPulseIntensity = 0;
        lastBeatTime = 0;
        currentMusicIntensity = 0;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    function formatTime(seconds) {
        if (isNaN(seconds)) return '0:00';
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    function updateProgress() {
        if (audio.duration && !isNaN(audio.duration)) {
            const progressPercent = (audio.currentTime / audio.duration) * 100;
            progress.style.width = `${progressPercent}%`;
            currentTime.textContent = formatTime(audio.currentTime);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞
    function loadTrack(index, autoPlay = false) {
        if (index >= 0 && index < tracks.length) {
            currentTrackIndex = index;
            const track = tracks[currentTrackIndex];
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
            audio.pause();
            isPlaying = false;
            playPauseBtn.textContent = '‚ñ∂';
            
            // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
            if (animationId) {
                cancelAnimationFrame(animationId);
                animationId = null;
            }
            
            audio.src = track.path;
            currentTrack.textContent = track.name;
            currentArtist.textContent = track.artist;
            trackSelect.value = track.path;
            
            updateTheme();
            
            const onLoaded = function() {
                duration.textContent = formatTime(audio.duration);
                audio.removeEventListener('loadedmetadata', onLoaded);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (autoPlay) {
                    setTimeout(() => {
                        playTrack();
                    }, 100);
                }
            };
            
            if (audio.readyState >= 1) {
                onLoaded();
            } else {
                audio.addEventListener('loadedmetadata', onLoaded);
            }
        }
    }

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
    function playTrack() {
        audio.play().then(() => {
            isPlaying = true;
            playPauseBtn.textContent = '‚è∏';
            if (!analyser) {
                initAudioAnalyzer();
            }
            visualize();
        }).catch(error => {
            console.error('Playback failed:', error);
            showPlayMessage();
        });
    }

    // –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
    function seek(seconds) {
        if (audio.duration) {
            audio.currentTime = Math.max(0, Math.min(audio.duration, audio.currentTime + seconds));
        }
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    function attemptAutoplay() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
        audio.currentTime = 0;
        
        const playPromise = audio.play();
        if (playPromise !== undefined) {
            playPromise.then(() => {
                isPlaying = true;
                playPauseBtn.textContent = '‚è∏';
                if (!analyser) initAudioAnalyzer();
                visualize();
            }).catch(error => {
                console.log('Autoplay blocked, showing message');
                showPlayMessage();
            });
        }
    }

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞
    function showPlayMessage() {
        const message = document.createElement('button');
        message.className = 'autoplay-message';
        message.textContent = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º—É–∑—ã–∫–∏';
        
        message.addEventListener('click', function() {
            playTrack();
            message.remove();
        });
        
        document.body.appendChild(message);
        
        setTimeout(() => {
            if (document.body.contains(message)) {
                message.remove();
            }
        }, 8000);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    playPauseBtn.addEventListener('click', () => {
        if (isPlaying) {
            audio.pause();
            isPlaying = false;
            playPauseBtn.textContent = '‚ñ∂';
            if (animationId) {
                cancelAnimationFrame(animationId);
                animationId = null;
            }
        } else {
            playTrack();
        }
    });

    prevBtn.addEventListener('click', () => {
        let newIndex = currentTrackIndex - 1;
        if (newIndex < 0) newIndex = tracks.length - 1;
        loadTrack(newIndex, true);
    });

    nextBtn.addEventListener('click', () => {
        let newIndex = currentTrackIndex + 1;
        if (newIndex >= tracks.length) newIndex = 0;
        loadTrack(newIndex, true);
    });

    trackSelect.addEventListener('change', function() {
        const selectedPath = this.value;
        const trackIndex = tracks.findIndex(track => track.path === selectedPath);
        if (trackIndex !== -1) {
            loadTrack(trackIndex, true);
        }
    });

    volumeSlider.addEventListener('input', () => {
        audio.volume = volumeSlider.value / 100;
    });

    progressBar.addEventListener('click', (e) => {
        if (audio.duration) {
            const clickX = e.offsetX;
            const width = progressBar.offsetWidth;
            const clickTime = (clickX / width) * audio.duration;
            audio.currentTime = clickTime;
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    document.addEventListener('keydown', (e) => {
        switch(e.key) {
            case 'ArrowLeft':
                seek(-5);
                break;
            case 'ArrowRight':
                seek(5);
                break;
            case 'ArrowUp':
                volumeSlider.value = Math.min(100, parseInt(volumeSlider.value) + 10);
                audio.volume = volumeSlider.value / 100;
                break;
            case 'ArrowDown':
                volumeSlider.value = Math.max(0, parseInt(volumeSlider.value) - 10);
                audio.volume = volumeSlider.value / 100;
                break;
            case ' ':
                e.preventDefault();
                playPauseBtn.click();
                break;
        }
    });

    audio.addEventListener('timeupdate', updateProgress);

    audio.addEventListener('ended', () => {
        let newIndex = currentTrackIndex + 1;
        if (newIndex >= tracks.length) newIndex = 0;
        loadTrack(newIndex, true);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞—É–¥–∏–æ
    audio.addEventListener('error', (e) => {
        console.error('Audio error:', e);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    createVisualizer();
    createParticles(); // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    loadTrack(0);
    
    // –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
        attemptAutoplay();
    }, 1000);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    const firstClickHandler = function() {
        if (!isPlaying) {
            attemptAutoplay();
        }
        document.removeEventListener('click', firstClickHandler);
    };
    document.addEventListener('click', firstClickHandler);
});
